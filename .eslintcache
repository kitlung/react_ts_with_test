[{"/Users/joker/Documents/react_ts_with_test/src/index.tsx":"1","/Users/joker/Documents/react_ts_with_test/src/reportWebVitals.ts":"2","/Users/joker/Documents/react_ts_with_test/src/App.tsx":"3","/Users/joker/Documents/react_ts_with_test/src/container/Home/index.tsx":"4","/Users/joker/Documents/react_ts_with_test/src/component/Title/index.tsx":"5","/Users/joker/Documents/react_ts_with_test/src/container/TodoInputField/index.tsx":"6"},{"size":502,"mtime":1607232422512,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1607230143213,"results":"9","hashOfConfig":"8"},{"size":297,"mtime":1607242043513,"results":"10","hashOfConfig":"8"},{"size":1142,"mtime":1607742905069,"results":"11","hashOfConfig":"8"},{"size":214,"mtime":1607244817875,"results":"12","hashOfConfig":"8"},{"size":1443,"mtime":1607743816367,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"h10i4o",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/joker/Documents/react_ts_with_test/src/index.tsx",[],[],"/Users/joker/Documents/react_ts_with_test/src/reportWebVitals.ts",["28"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/joker/Documents/react_ts_with_test/src/App.tsx",[],"/Users/joker/Documents/react_ts_with_test/src/container/Home/index.tsx",["29","30"],"/Users/joker/Documents/react_ts_with_test/src/component/Title/index.tsx",[],"/Users/joker/Documents/react_ts_with_test/src/container/TodoInputField/index.tsx",["31"],{"ruleId":"32","severity":1,"message":"33","line":3,"column":25,"nodeType":"34","messageId":"35","endLine":3,"endColumn":57},{"ruleId":"36","severity":1,"message":"37","line":1,"column":16,"nodeType":"38","messageId":"39","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":27,"column":68,"nodeType":"42","messageId":"43","endLine":27,"endColumn":71,"suggestions":"44"},{"ruleId":"40","severity":1,"message":"41","line":26,"column":68,"nodeType":"42","messageId":"43","endLine":26,"endColumn":71,"suggestions":"45"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["46","47"],["48","49"],{"messageId":"50","fix":"51","desc":"52"},{"messageId":"53","fix":"54","desc":"55"},{"messageId":"50","fix":"56","desc":"52"},{"messageId":"53","fix":"57","desc":"55"},"suggestUnknown",{"range":"58","text":"59"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"58","text":"60"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"61","text":"59"},{"range":"61","text":"60"},[714,717],"unknown","never",[642,645]]